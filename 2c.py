# -*- coding: utf-8 -*-
"""2c.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d3Nj1zkURW4ik6MZ7pSRzT1WI6yjEZjY
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

import tensorflow as tf
import numpy as np
from google.colab import drive
import pandas as pd
import matplotlib.pyplot as plt

colors = ['k','y','c','m','g','r','b']
lambdas = [0,0.001,0.01,0.1,1,10,100]
FIXED_FEATURE =3

def create_feature_matrix(x, nb_features):
   
    tmp_features = []
    for deg in range(1, nb_features + 1):
        tmp_features.append(np.power(x, deg))
    return np.column_stack(tmp_features)


def get_data(filename):
  
   # citamo podatke i ucitavamo prvu data[x] PM2.5 i drugu data[y] sa tempraturom, vlaznoscu i lowcost2.5 
    all_data = pd.read_excel(filename, header = [0], engine = 'openpyxl')
    data = dict()
    data['x'] = all_data.iloc[:,9]
    print(data['x'])
    data['y'] = all_data.iloc[:, [2,3,4]]
    print(data['y'])

    # mesamo podatke jer ne zelimo da napamet nauci ili uvidi neki patern
    nb_samples = data['x'].shape[0]
    data['x'] = data['x'].sample(frac=1)
    data['y'] = data['y'].sample(frac=1)

    # normalizujemo zbog gradijent descenta
    data['y'] = (data['y'] - np.mean(data['y'])) / np.std(data['y'])

    return data['x'], data['y'], nb_samples



def p_regression(data_x,data_y,features,samples,lamb):
    tf.reset_default_graph()
    data_x = create_feature_matrix(data_x, features)
    data_y = create_feature_matrix(data_y, features)

    X = tf.placeholder(shape=(None, features), dtype=tf.float32, name='X')
    Y = tf.placeholder(shape=None, dtype=tf.float32, name='Y')
    W = tf.Variable(tf.zeros(features), name='weights')
    bias = tf.Variable(0.0, name='bias')

    w_col = tf.reshape(W, (features, 1), name='weights_reshaped')
    hyp = tf.add(tf.matmul(X, w_col), bias, name='hypothesis')

    Y_col = tf.reshape(Y, (-1, 1), name='Y_reshaped')
    loss = tf.reduce_mean(tf.square(hyp - Y_col), name='loss_before')

    # dodata L2 regularizator
    regularizer = tf.nn.l2_loss(w_col, name='regularizer')
    loss = tf.reduce_mean(loss + lamb * regularizer, name='loss')
    opt_op = tf.train.AdamOptimizer().minimize(loss)


    nb_epochs = 100 

    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())

        for epoch in range(nb_epochs):

    
            epoch_loss = 0
            for sample in range(samples):
                feed = {X: data_x[sample].reshape((1, features)),
                        Y: data_y[sample]}
                _, curr_loss = sess.run([opt_op, loss], feed_dict=feed)
                epoch_loss += curr_loss

            epoch_loss /= samples
            if (epoch + 1) % 10 == 0:                                           
                print('lambda: {}| Epoch: {}/{}| avg loss: {:.7f}'.format(lamb, epoch + 1, nb_epochs, epoch_loss))

        w_val = sess.run(W)
        bias_val = sess.run(bias)
        print('w = ', w_val, 'bias = ', bias_val)
        xs = create_feature_matrix(np.linspace(-2, 4, 100), features)
        hyp_val = sess.run(hyp, feed_dict={X: xs})
        final_loss = sess.run(loss, feed_dict={X: data_x, Y: data_y})
        print('final loss = ', final_loss, '\n')
        return xs, hyp_val, final_loss
    


def main():
    np.set_printoptions(suppress=True, precision=5)                    
    drive.mount('/content/gdrive')
    data_x, data_y, nb_samples = get_data('/content/gdrive/My Drive/Colab Notebooks/2a.xlsx')
    plt.scatter(data_x.iloc[:, 0],data_y.iloc[:, 0], c="b")
    plt.xlabel('X')
    plt.ylabel('Y')

    final_cost_f = []
    for i in range(len(lambdas)):
        xs,hyp,final_loss = p_regression(data_x,data_y,FIXED_FEATURE,nb_samples,lambdas[i])
        plt.plot(xs[:, 0].tolist(), hyp.tolist(), color=colors[i], label='lmd={}'.format(lambdas[i]))
        final_cost_f.append(final_loss)


    #prvi graf
    plt.xlim([-2, 4])
    plt.ylim([-3, 2])
    plt.legend()
    plt.show()

    #drugi graf
    plt.plot(lambdas, final_cost_f, c="r")
    plt.xlabel('lambda')
    plt.ylabel('loss')
    plt.show()

    writer = tf.summary.FileWriter('.')
    writer.add_graph(tf.get_default_graph())
    writer.flush()





if __name__ == "__main__":
    main()